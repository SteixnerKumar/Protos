/*
 *	THINC Lab at UGA | Cyber Deception Group
 *
 *	Author: Aditya Shinde
 * 
 *	email: shinde.aditya386@gmail.com
 */
package thinclab.spuddx_parser;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.TokenStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import thinclab.RandomVariable;
import thinclab.legacy.DD;
import thinclab.legacy.DDleaf;
import thinclab.legacy.DDnode;
import thinclab.legacy.Global;
import thinclab.utils.Tuple;

/*
 * @author adityas
 *
 */
public class SpuddXParserWrapper {

	/*
	 * Wrapper for SPUDDX wrapper generated by ANTLR4. Implements the visitor
	 * methods for each statement.
	 */

	private String fileName;
	private SpuddXParser parser;

	private static final Logger LOGGER = LogManager.getLogger(SpuddXParserWrapper.class);

	// -------------------------------------------------------------------------
	// Implementation of ANTLR4 visitors

	private class VarValueVisitor extends SpuddXBaseVisitor<String> {

		@Override
		public String visitVar_value(SpuddXParser.Var_valueContext ctx) {
			return ctx.VARVAL().getText();
		}
	}

	private class RvDeclVisitor extends SpuddXBaseVisitor<RandomVariable> {

		@Override
		public RandomVariable visitRv_decl(SpuddXParser.Rv_declContext ctx) {

			var varValsVisitor = new VarValueVisitor();

			String varName = ctx.VARNAME().toString();

			List<String> valNames = ctx.var_value().stream().map(varValsVisitor::visit).collect(Collectors.toList());

			LOGGER.debug(String.format("Parsed RV %s: %s", varName, valNames));

			return new RandomVariable(varName, valNames);
		}
	}

	private class StateVarDeclVisitor extends SpuddXBaseVisitor<List<RandomVariable>> {

		@Override
		public List<RandomVariable> visitState_var_decl(SpuddXParser.State_var_declContext ctx) {

			var rvVisitor = new RvDeclVisitor();

			var stateVars = ctx.rv_decl().stream().map(rvVisitor::visit).collect(Collectors.toList());

			LOGGER.debug(String.format("Parsed state variables %s", stateVars));

			return stateVars;
		}
	}

	private class ObsVarDeclVisitor extends SpuddXBaseVisitor<List<RandomVariable>> {

		@Override
		public List<RandomVariable> visitObs_var_decl(SpuddXParser.Obs_var_declContext ctx) {

			var rvVisitor = new RvDeclVisitor();

			var obsVars = ctx.rv_decl().stream().map(rvVisitor::visit).collect(Collectors.toList());

			LOGGER.debug(String.format("Parsed obs variables %s", obsVars));

			return obsVars;
		}
	}

	private class ActionsDeclVisitor extends SpuddXBaseVisitor<List<RandomVariable>> {

		@Override
		public List<RandomVariable> visitActions_decl(SpuddXParser.Actions_declContext ctx) {

			var rvVisitor = new RvDeclVisitor();

			var actVars = ctx.rv_decl().stream().map(rvVisitor::visit).collect(Collectors.toList());

			LOGGER.debug(String.format("Parsed action variables %s", actVars));

			return actVars;
		}
	}

	private class DDLeafVisitor extends SpuddXBaseVisitor<Optional<DD>> {

		@Override
		public Optional<DD> visitDd_leaf(SpuddXParser.Dd_leafContext ctx) {

			var leaf = Optional.ofNullable(
						DDleaf.getDD(
								Float.valueOf(
										ctx.FLOAT_NUM()
										   .getText())));

			return leaf;
		}
	}
	
	private class DDChildVisitor extends SpuddXBaseVisitor<Tuple<String, Optional<DD>>> {
				
		@Override
		public Tuple<String, Optional<DD>> visitDd_child(SpuddXParser.Dd_childContext ctx) {
			
			String childName = ctx.VARVAL().getText();
			var childDD = new DDDeclVisitor().visit(ctx.dd_decl());
			
			return new Tuple<String, Optional<DD>>(childName, childDD);
		}
	}
	
	private class DDDeclVisitor extends SpuddXBaseVisitor<Optional<DD>> {
		
		@Override
		public Optional<DD> visitDd_decl(SpuddXParser.Dd_declContext ctx) {
			
			if (ctx.dd_leaf().isEmpty()) {
				
				// Prepare root DD
				String varName = ctx.VARNAME().getText();
				int varIndex = Global.varNames.indexOf(varName);
				var valNames = Global.valNames.get(varIndex);
				
				// Prepare children
				var ddChildVisitor = new DDChildVisitor();
				var childDDList = ctx.dd_child().stream()
												.map(ddChildVisitor::visit)
												.collect(Collectors.toList());
				
				// Check if
				DD[] children = new DD[childDDList.size()];
				for (var child : childDDList) {
					int childIndex = valNames.indexOf(child.first());
					
					if (childIndex < 0 || child.second().isEmpty()) {
						
						LOGGER.error("Could not parse DD for child " + child.first());
						return null;
					}
					
					children[childIndex] = child.second().get();
				}
				
				if (childDDList.size() != Global.varDomSize.get(varIndex))
					LOGGER.error("Error while parsing DD");
				
				return Optional.ofNullable(DDnode.getDD(varIndex, children));
			}
			
			else return new DDLeafVisitor().visit(ctx.dd_leaf());
		}
	}

	private class DDDeclsVisitor extends SpuddXBaseVisitor<Tuple<String, Optional<DD>>> {

		@Override
		public Tuple<String, Optional<DD>> visitDd_decls(SpuddXParser.Dd_declsContext ctx) {

			String ddName = ctx.VARNAME().getText();
			var parsedDD = new DDDeclVisitor().visit(ctx.dd_decl());
			
			return new Tuple<String, Optional<DD>>(ddName, parsedDD);
		}
	}

	private class DomainVisitor extends SpuddXBaseVisitor<List<RandomVariable>> {

		@Override
		public List<RandomVariable> visitDomain(SpuddXParser.DomainContext ctx) {

			var sVars = new StateVarDeclVisitor().visit(ctx.state_var_decl());
			var oVars = new ObsVarDeclVisitor().visit(ctx.obs_var_decl());

			sVars.addAll(oVars);

			return sVars;
		}

		// --------------------------------------------------------------------------
		// Methods for parsing out individual components

		public List<RandomVariable> getStateVarDecls(SpuddXParser.DomainContext ctx) {

			return new StateVarDeclVisitor().visit(ctx.state_var_decl());
		}

		public List<RandomVariable> getObsVarDecls(SpuddXParser.DomainContext ctx) {

			return new ObsVarDeclVisitor().visit(ctx.obs_var_decl());
		}

		public List<RandomVariable> getActionVarDecls(SpuddXParser.DomainContext ctx) {

			return new ActionsDeclVisitor().visit(ctx.actions_decl());
		}
		
		public HashMap<String, DD> getDeclaredDDs(SpuddXParser.DomainContext ctx) {
		
			HashMap<String, DD> parsedDDs = new HashMap<>(10);
			
			if (!ctx.dd_decls().isEmpty()) {
				
				var declsVisitor = new DDDeclsVisitor();
				ctx.dd_decls().stream()
							  .map(declsVisitor::visit)
							  .filter(t -> t.second().isPresent())
							  .map(d -> new Tuple<String, DD>(d.first(), d.second().get()))
							  .forEach(f -> parsedDDs.put(f.first(), f.second()));
				
			}
			
			return parsedDDs;
		}

	}

	// -------------------------------------------------------------------------

	public SpuddXParserWrapper(String fileName) {

		this.fileName = fileName;

		try {

			// Get tokens from lexer
			InputStream is = new FileInputStream(this.fileName);
			ANTLRInputStream antlrIs = new ANTLRInputStream(is);
			SpuddXLexer lexer = new SpuddXLexer(antlrIs);
			TokenStream tokens = new CommonTokenStream(lexer);

			this.parser = new SpuddXParser(tokens);

		}

		catch (Exception e) {
			LOGGER.error(String.format("Error while trying to parse %s: %s", this.fileName, e));
			System.exit(-1);
		}
	}

	public List<RandomVariable> getStateVarDecls() {

		this.parser.reset();
		var domainVisitor = new DomainVisitor();
		return domainVisitor.getStateVarDecls(this.parser.domain());

	}

	public List<RandomVariable> getObsVarDecls() {

		this.parser.reset();
		var domainVisitor = new DomainVisitor();
		return domainVisitor.getObsVarDecls(this.parser.domain());

	}

	public List<RandomVariable> getActionVarDecls() {

		this.parser.reset();
		var domainVisitor = new DomainVisitor();
		return domainVisitor.getActionVarDecls(this.parser.domain());

	}
	
    public HashMap<String, DD> getDefinedDDs() {

		this.parser.reset();
		var domainVisitor = new DomainVisitor();
		return domainVisitor.getDeclaredDDs(this.parser.domain());
	}

}
