/*
 *	THINC Lab at UGA | Cyber Deception Group
 *
 *	Author: Aditya Shinde
 * 
 *	email: shinde.aditya386@gmail.com
 */
package thinclab.spuddx_parser;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.TokenStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import thinclab.RandomVariable;
import thinclab.env.Environment;
import thinclab.env.SamplingBasedPOEnvironment;
import thinclab.legacy.DD;
import thinclab.legacy.DDleaf;
import thinclab.legacy.DDnode;
import thinclab.legacy.Global;
import thinclab.legacy.OP;
import thinclab.models.DirectedGraphicalModel;
import thinclab.utils.Tuple;

/*
 * @author adityas
 *
 */
public class SpuddXParserWrapper {

	/*
	 * Wrapper for SPUDDX wrapper generated by ANTLR4. Implements the visitor
	 * methods for each statement.
	 */

	private String fileName;
	private SpuddXParser parser;

	private static final Logger LOGGER = LogManager.getLogger(SpuddXParserWrapper.class);
	
	private class CPDDefVisitor extends SpuddXBaseVisitor<Tuple<String, DD>> {

		private HashMap<String, DD> declaredDDs;

		public CPDDefVisitor(HashMap<String, DD> declaredDDs) {

			super();
			this.declaredDDs = declaredDDs;
		}

		@Override
		public Tuple<String, DD> visitCpd_def(SpuddXParser.Cpd_defContext ctx) {

			String varName = ctx.variable_name().IDENTIFIER().getText();
			DD dd = new DDParser(this.declaredDDs).visit(ctx.dd_decl());

			return new Tuple<String, DD>(varName, dd);
		}

	}

	private class ActionDBNDef extends SpuddXBaseVisitor<DirectedGraphicalModel> {

		private HashMap<String, DD> declaredDDs;

		public ActionDBNDef(HashMap<String, DD> declaredDDs) {

			super();
			this.declaredDDs = declaredDDs;
		}

		public DirectedGraphicalModel visitActiondbn_def(SpuddXParser.Actiondbn_defContext ctx) {

			var actions = ctx.actions().IDENTIFIER().stream().map(i -> i.getText()).collect(Collectors.toList());

			var cpdParser = new CPDDefVisitor(this.declaredDDs);
			HashMap<String, DD> transitions = new HashMap<>(10);

			ctx.cpd_def().stream().map(cpdParser::visit).forEach(t -> transitions.put(t.first(), t.second()));

			DD[] transitionDDs = new DD[Global.varNames.size() / 2];
			LOGGER.debug("Checking for " + Global.varNames);

			for (int i = 0; i < transitionDDs.length; i++) {

				if (transitions.containsKey(Global.varNames.get(i)))
					transitionDDs[i] = transitions.get(Global.varNames.get(i));

				else
					transitionDDs[i] = DirectedGraphicalModel.getSameTransitionDD(Global.varNames.get(i));
			}

			return new DirectedGraphicalModel(actions, transitionDDs);
		}
	}

	private class EnvDefVisitor extends SpuddXBaseVisitor<Environment> {

		private HashMap<String, DD> declaredDDs;

		public EnvDefVisitor(HashMap<String, DD> declaredDDs) {

			super();
			this.declaredDDs = declaredDDs;
		}

		@Override
		public Environment visitEnv_def(SpuddXParser.Env_defContext ctx) {

			var env = new SamplingBasedPOEnvironment();
			var actionDBNVisitor = new ActionDBNDef(this.declaredDDs);

			ctx.actiondbn_def().stream().map(actionDBNVisitor::visit)
					.forEach(d -> env.addDynamicsForAction(d.jointActionSequence, d));

			return env;
		}

	}

	// -------------------------------------------------------------------------

	public SpuddXParserWrapper(String fileName) {

		this.fileName = fileName;

		try {

			// Get tokens from lexer
			InputStream is = new FileInputStream(this.fileName);
			ANTLRInputStream antlrIs = new ANTLRInputStream(is);
			SpuddXLexer lexer = new SpuddXLexer(antlrIs);
			TokenStream tokens = new CommonTokenStream(lexer);

			this.parser = new SpuddXParser(tokens);

		}

		catch (Exception e) {

			LOGGER.error(String.format("Error while trying to parse %s: %s", this.fileName, e));
			System.exit(-1);
		}
	}
	
	public List<RandomVariable> getVariableDeclarations() {
		
		this.parser.reset();
		return new VariablesDeclarationVisitor().visit(this.parser.domain());
	}
	
	public HashMap<String, DD> getDDs() {
		
		this.parser.reset();
		return new DDParser(new HashMap<String, DD>()).getDDs(this.parser.domain());
	}

}
